# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1711vMdxB4ip3x_A0KIV8WU6Mh9Y0gPML
"""

import streamlit as st
import requests
import pandas as pd
import numpy as np
import json
import seaborn as sns
import matplotlib.pyplot as plt


url_rodada = "https://api.cartolafc.globo.com/mercado/status"
texto_rodada = requests.get(url_rodada).text
rodada = 34



pages = ["Confrontos","Cruzamento Cartola", "Comparação de jogadores","Ranking SofaScore"]#,"Cruzamento SofaScore"]
tags = ["Awesome", "Social"]
st.set_page_config(page_title='Breno Mestre',layout="wide")
page = st.sidebar.radio("Navegação", options=pages)

clubes = pd.read_excel('Clubes.xlsx', engine='openpyxl')
json_partida = json.load(open(f'dados_api/partidas{rodada}.txt', encoding = 'utf-8'))
df_proxima_partida = pd.DataFrame.from_dict(json_partida['partidas']).drop(['partida_data', 'timestamp', 'local', 'placar_oficial_mandante', 'placar_oficial_visitante', 'status_transmissao_tr', 'inicio_cronometro_tr', 'status_cronometro_tr', 'periodo_tr', 'transmissao'], axis = 1)

def inclui_mando_proxima_rodada(id_clube):
  if id_clube in df_proxima_partida.clube_casa_id.unique():
    return 1
  elif id_clube in df_proxima_partida.clube_visitante_id.unique():
    return 0 
  else:
    return np.nan



if page == "Cruzamento Cartola":
 
  #st.set_page_config(page_title='Cruzamento de scouts',layout="wide")

  st.title("CRUZAMENTO DE SCOUTS DADOS CARTOLA")
  st.write("*Dados referentes à 34ª rodada do brasileirão 2021")
  data = pd.read_excel("completo_mercado.xlsx", engine='openpyxl')
  data['Mando_clube_proxima_rodada'] = data['Clube_ID'].apply(lambda x: inclui_mando_proxima_rodada(x))
  data['Mando_adversario_proxima_rodada'] = data['Adversario'].apply(lambda x: inclui_mando_proxima_rodada(x))



  col1, col2, col3 = st.columns(3)
  with col1:
    scouts_list = ['Pontos', 'Média', 'G', 'A', 'FT', 'FD', 'FF', 'FS', 'PP', 'I', 'PI', 'PS', 'SG', 'DP', 'DE', 'DS', 'GC', 'CV', 'CA', 'GS', 'FC', 'PC']
    scout_selecionado = st.selectbox('Scout', options=scouts_list)
  with col2:
    posicao_list = ['Todos', 'Goleiro', 'Zagueiro', 'Lateral Esquerda', 'Lateral Direito', 'Meia', 'Atacante']
    posicao_selecionada = st.selectbox('Posição', options=posicao_list)
  with col3:
    opcoes_list = ['Todos x Todos','Casa x Fora']
    opcoes_selecionada = st.selectbox('Mando', options=opcoes_list)

  df_jogou = data[(data['Variacao'] != 0) & (data['Pontos'] != 0)] #df dos jogadores que jogaram na rodada
  
  #row = st.sidebar.slider("Display Records:",0,100,50)
  def cria_df_conquistados(scout_selecionado, posicao_selecionada, opcoes_selecionada):
    global df_jogou

    if opcoes_selecionada == 'Todos x Todos':
      if posicao_selecionada == 'Todos':
        if scout_selecionado == 'Média':
          df_conquistado = df_jogou.groupby(by='Clube_nome').mean().Pontos.sort_values(ascending = False)
        else:
          df_conquistado = data.groupby(by='Clube_nome').sum().sort_values(by=scout_selecionado, ascending = False)[scout_selecionado]
      else:
        if scout_selecionado == 'Média':
          df_conquistado = df_jogou[df_jogou['Posicao_nome'] == posicao_selecionada].groupby(by='Clube_nome').mean().Pontos.sort_values(ascending = False)
        else:
          df_conquistado = data[data['Posicao_nome'] == posicao_selecionada].groupby(by='Clube_nome').sum().sort_values(by=scout_selecionado, ascending = False)[scout_selecionado]
    else:
      if posicao_selecionada == 'Todos':
        if scout_selecionado == 'Média':
          df_conquistado = df_jogou[df_jogou['Mandante'] == df_jogou['Mando_clube_proxima_rodada']].groupby(by='Clube_nome').mean().Pontos.sort_values(ascending = False)
        else:
          df_conquistado = data[data['Mandante'] == data['Mando_clube_proxima_rodada']].groupby(by='Clube_nome').sum().sort_values(by=scout_selecionado, ascending = False)[scout_selecionado]
      else:
        if scout_selecionado == 'Média':
          
          df_jogou = df_jogou[df_jogou['Mandante'] == df_jogou['Mando_clube_proxima_rodada']]
          df_conquistado = df_jogou[df_jogou['Posicao_nome'] == posicao_selecionada]
          df_conquistado = df_conquistado.groupby(by='Clube_nome').mean()
          df_conquistado = df_conquistado.Pontos.sort_values(ascending = False)
        else:
          data_temp = data[data['Mandante'] == data['Mando_clube_proxima_rodada']]
          df_conquistado = data_temp[data_temp['Posicao_nome'] == posicao_selecionada].groupby(by='Clube_nome').sum().sort_values(by=scout_selecionado, ascending = False)[scout_selecionado]

    return df_conquistado

  def cria_df_cedidos(scout_selecionado, posicao_selecionada, opcoes_selecionada):
    global df_jogou

    if opcoes_selecionada == 'Todos x Todos':
      if posicao_selecionada == 'Todos':
        if scout_selecionado == 'Média':
          df_cedido = df_jogou.groupby(by='Adversario_nome').mean().Pontos.sort_values(ascending = False)
        else:
          df_cedido = data.groupby(by='Adversario_nome').sum().sort_values(by=scout_selecionado, ascending = False)[scout_selecionado]
      else:
        if scout_selecionado == 'Média':
          df_cedido = df_jogou[df_jogou['Posicao_nome'] == posicao_selecionada].groupby(by='Adversario_nome').mean().Pontos.sort_values(ascending = False)
        else:
          df_cedido = data[data['Posicao_nome'] == posicao_selecionada].groupby(by='Adversario_nome').sum().sort_values(by=scout_selecionado, ascending = False)[scout_selecionado]
    else:
      #foi necessario criar o df_jogou novamente aqui. Investigar o porquê posteriormente
      df_jogou = data[(data['Variacao'] != 0) & (data['Pontos'] != 0)] #df dos jogadores que jogaram na rodada
      if posicao_selecionada == 'Todos':
        if scout_selecionado == 'Média':
          df_cedido = df_jogou[df_jogou['Mandante'] != df_jogou['Mando_adversario_proxima_rodada']].groupby(by='Adversario_nome').mean().Pontos.sort_values(ascending = False)
        else:
          df_cedido = data[data['Mandante'] != data['Mando_adversario_proxima_rodada']].groupby(by='Adversario_nome').sum().sort_values(by=scout_selecionado, ascending = False)[scout_selecionado]
      else:
        if scout_selecionado == 'Média':
          df_jogou = df_jogou[df_jogou['Mandante'] != df_jogou['Mando_adversario_proxima_rodada']]
          df_cedido = df_jogou[df_jogou['Posicao_nome'] == posicao_selecionada]
       
          df_cedido = df_cedido.groupby(by='Adversario_nome').mean()
    
          df_cedido = df_cedido.Pontos.sort_values(ascending = False)
        else:
          data_temp = data[data['Mandante'] != data['Mando_adversario_proxima_rodada']]
          df_cedido = data_temp[data_temp['Posicao_nome'] == posicao_selecionada].groupby(by='Adversario_nome').sum().sort_values(by=scout_selecionado, ascending = False)[scout_selecionado]
    
    return df_cedido

  def inclui_clube(ID:int):
    """
    Função para incluir o nome do clube no DataFrame, que tem como única identificação o ID do clube.

    Argumento: ID -> identificador do clube
    Saída: Abreviação do nome do clube
    """
    return clubes.set_index("id").loc[ID, 'abreviacao']


  df_conquistado = cria_df_conquistados(scout_selecionado, posicao_selecionada, opcoes_selecionada)
  df_cedido = cria_df_cedidos(scout_selecionado, posicao_selecionada, opcoes_selecionada)
  

  
  clubes = pd.read_excel('Clubes.xlsx', engine='openpyxl')
  json_partida = json.load(open(f'dados_api/partidas{rodada}.txt', encoding = 'utf-8'))

  df_partidas = pd.DataFrame.from_dict(json_partida['partidas'])
  df_partidas['Casa_nome1'] = df_partidas['clube_casa_id'].apply(lambda x: inclui_clube(x))
  df_partidas['Fora_nome1'] = df_partidas['clube_visitante_id'].apply(lambda x: inclui_clube(x))
  df_partidas['Casa_nome2'] = df_partidas['clube_casa_id'].apply(lambda x: inclui_clube(x))
  df_partidas['Fora_nome2'] = df_partidas['clube_visitante_id'].apply(lambda x: inclui_clube(x))

  df_partidas = df_partidas[['Casa_nome1', 'Fora_nome1', 'Casa_nome2', 'Fora_nome2']]

  def cria_confronto(casa_nome, fora_nome):
    return f'{casa_nome} x {fora_nome}'
  df_partidas['confronto'] = df_partidas.apply(lambda x: cria_confronto(x['Casa_nome1'], x['Fora_nome1']), axis = 1)

  df_partidas = df_partidas.set_index('Casa_nome1').merge(df_conquistado,left_index=True,right_index=True, suffixes=('_conquistado_casa', '_conquistado_fora'))
  df_partidas = df_partidas.set_index('Fora_nome1').merge(df_conquistado, left_index=True, right_index=True, suffixes=('_conquistado_casa', '_conquistado_fora'))
  df_partidas = df_partidas.set_index('Casa_nome2').merge(df_cedido,left_index=True,right_index=True, suffixes=('_cedido_casa', '_cedido_fora'))
  df_partidas = df_partidas.set_index('Fora_nome2').merge(df_cedido, left_index=True, right_index=True, suffixes=('_cedido_casa', '_cedido_fora'))

  if scout_selecionado == 'Média':
    scout_selecionado = 'Pontos'

  df_1 = df_partidas[['confronto', f'{scout_selecionado}_conquistado_casa', f'{scout_selecionado}_cedido_fora']]
  df_2 = df_partidas[['confronto', f'{scout_selecionado}_conquistado_fora', f'{scout_selecionado}_cedido_casa']]


  selecao_possivel = ['Cedidos', 'Conquistados']
  selecao_escolhida = st.radio('Ordenar por: ', selecao_possivel)
  if selecao_escolhida == 'Cedidos':
    sel1 = 'cedido_fora'
    sel2 = 'cedido_casa' 
  else:
    sel1 = 'conquistado_casa'
    sel2 = 'conquistado_fora'

  df_1 = df_1.sort_values(by=f'{scout_selecionado}_{sel1}')
  df_2 = df_2.sort_values(by=f'{scout_selecionado}_{sel2}')


  def graph1(df_1):
    global scout_selecionado
    plt.style.use('dark_background')
    y = range(0, len(df_1))
    
    x_casa = df_1[f'{scout_selecionado}_conquistado_casa']
    x_fora = df_1[f'{scout_selecionado}_cedido_fora']

    fig, axes = plt.subplots(ncols=2, sharey=True, figsize=(7, 7))
    plt.subplots_adjust(wspace=.00)

    axes[0].barh(y, x_casa, align='center', color='green')
    axes[0].set(title='Conquistado time Casa')
    axes[1].barh(y, x_fora, align='center', color='red')
    axes[1].set(title='Cedido time Fora')
    
    limite = (max(max(x_casa), max(x_fora)))
    if scout_selecionado == 'Pontos':
      axes[0].set(xlim=(0, limite+.5*limite))
      axes[1].set(xlim=(0, limite+.5*limite))
    else:
      axes[0].set(xlim=(0, limite+.2*limite))
      axes[1].set(xlim=(0, limite+.2*limite))

    if scout_selecionado != 'GC':    
      for p in axes[0].patches:
        width = p.get_width()
        plt.text(-p.get_width()-p.get_width()*.05-.1, p.get_y()+0.55*p.get_height(),
                 f'{width if type(width) == int else round(width,2)}',
                 ha='right', va='center')
      for p in axes[1].patches:
        width = p.get_width()
        plt.text(p.get_width()+p.get_width()*.05+.1, p.get_y()+0.55*p.get_height(),
                 f'{width if type(width) == int else round(width,2)}',
                 ha='left', va='center')
  

    axes[0].set(yticks=y, yticklabels=df_1['confronto'])
    axes[0].invert_xaxis()
    
    axes[0].grid(alpha = .15)
    axes[1].grid(alpha = .15)

    return fig

  def graph2(df_1):
    global scout_selecionados
    plt.style.use('dark_background')
    y = range(0, len(df_1))
    
    x_casa = df_1[f'{scout_selecionado}_cedido_casa']
    x_fora = df_1[f'{scout_selecionado}_conquistado_fora']

    fig, axes = plt.subplots(ncols=2, sharey=True, figsize=(7, 7))
    plt.subplots_adjust(wspace=.00)

    axes[0].barh(y, x_casa, align='center', color='red')
    axes[0].set(title='Cedido time Casa')
    axes[1].barh(y, x_fora, align='center', color='green')
    axes[1].set(title='Conquistado time Fora')

    limite = (max(max(x_casa), max(x_fora)))

    if scout_selecionado == 'Pontos':
      axes[0].set(xlim=(0, limite+.3*limite))
      axes[1].set(xlim=(0, limite+.3*limite))
    else:
      axes[0].set(xlim=(0, limite+.15*limite))
      axes[1].set(xlim=(0, limite+.15*limite))


    if scout_selecionado != 'GC':
      for p in axes[0].patches:
        width = p.get_width()
        plt.text(-p.get_width()-p.get_width()*.05-.1, p.get_y()+0.55*p.get_height(),
                 f'{width if type(width) == int else round(width,2)}',
                 ha='right', va='center')
      for p in axes[1].patches:
        width = p.get_width()
        plt.text(p.get_width()+p.get_width()*.05+.1, p.get_y()+0.55*p.get_height(),
                 f'{width if type(width) == int else round(width,2)}',
                 ha='left', va='center')


    axes[0].set(yticks=y, yticklabels=df_1['confronto'])
    axes[0].invert_xaxis()

    
    axes[0].grid(alpha = .15)
    axes[1].grid(alpha = .15)

    return fig

  ""
  ""
  col4, col5 = st.columns(2)
  with col4:
    st.write(graph1(df_1))
  with col5:
    st.write(graph2(df_2))

  if scout_selecionado == 'G':
    st.write("*É considerado, apenas, o scout Gol conquistado e cedido pelos times. Sendo assim, gols contra não são considerados. Para ver o número de gols conquistados e cedidos, você pode selecionar número de gols na página 'Cruzamento SofaScore'.")
  elif scout_selecionado == 'SG':
    st.write("*É considerado o scout SG conquistado e cedido pelos times. Para ver os times que conquistaram e cederam mais 'clean sheets' (jogos sem sofrer gols) você pode na página 'Cruzamento SofaScore'.")
elif page == 'Cruzamento SofaScore':

  st.title("CRUZAMENTO DE SCOUTS SOFASCORE")
  data = pd.read_excel("completo_sofascore.xlsx", engine='openpyxl')

  st.write("*Dados referentes à 34ª rodada do brasileirão 2021")
  clubes = pd.read_excel('Clubes.xlsx', engine='openpyxl')
  json_partida = json.load(open(f'dados_api/partidas{rodada}.txt', encoding = 'utf-8'))

  data = data[['Time', 'ID', 'Adversario_nome', 'Adversario_id', 'Mandante',
        'Mando_clube_prox_rdd', 'Mando_adversario_prox_rdd','Goals scored', 'Clean sheets','Errors leading to shot','Errors leading to goal', 'Goals from inside the box_total', 'Goals from inside the box_acertados', 'Goals from outside the box_total', 'Goals from outside the box_acertados', 'Free kick goals_total']]
  data.columns = ['Time', 'ID', 'Adversario_nome', 'Adversario_id', 'Mandante',
        'Mando_clube_prox_rdd', 'Mando_adversario_prox_rdd','Gols','Jogos sem levar gols','Erros que levaram a finalizacao do adversario','Erros que levaram a gol do adversario','Chutes de dentro da área', 'Gols de dentro da área', 'Chutes de fora da área', 'Gols de fora da área', 'Chutes de cobrança de falta']

  data['Mando_clube_proxima_rodada'] = data['ID'].apply(lambda x: inclui_mando_proxima_rodada(x))
  data['Mando_adversario_proxima_rodada'] = data['Adversario_id'].apply(lambda x: inclui_mando_proxima_rodada(x))



  col1, col2 = st.columns(2)
  with col1:
    scouts_list = ['Gols','Jogos sem levar gols','Chutes de dentro da área', 'Gols de dentro da área', 'Chutes de fora da área', 'Gols de fora da área','Erros que levaram a finalizacao do adversario', 'Erros que levaram a gol do adversario', 'Chutes de cobrança de falta']
    scout_selecionado = st.selectbox('Scout', options=scouts_list)
  with col2:
    opcoes_list = ['Todos x Todos','Casa x Fora']
    opcoes_selecionada = st.selectbox('Mando', options=opcoes_list)



  def cria_df_conquistados(scout_selecionado, opcoes_selecionada):
    if opcoes_selecionada == 'Todos x Todos':
      df_conquistado = data.groupby(by='Time').sum()[scout_selecionado]
    else:
      df_conquistado = data[data['Mandante'] == data['Mando_clube_proxima_rodada']].groupby(by='Time').sum()[scout_selecionado]

    return df_conquistado

  def cria_df_cedidos(scout_selecionado, opcoes_selecionada):
    if opcoes_selecionada == 'Todos x Todos':
      df_cedido = data.groupby(by='Adversario_nome').sum()[scout_selecionado]
    else:
      df_cedido = data[data['Mandante'] != data['Mando_adversario_proxima_rodada']].groupby(by='Adversario_nome').sum()[scout_selecionado]

    return df_cedido

  def inclui_clube(ID:int):
    """
    Função para incluir o nome do clube no DataFrame, que tem como única identificação o ID do clube.

    Argumento: ID -> identificador do clube
    Saída: Abreviação do nome do clube
    """
    return clubes.set_index("id").loc[ID, 'abreviacao']


  df_conquistado = cria_df_conquistados(scout_selecionado, opcoes_selecionada)
  df_cedido = cria_df_cedidos(scout_selecionado, opcoes_selecionada)

  df_partidas = pd.DataFrame.from_dict(json_partida['partidas'])
  df_partidas['Casa_nome1'] = df_partidas['clube_casa_id'].apply(lambda x: inclui_clube(x))
  df_partidas['Fora_nome1'] = df_partidas['clube_visitante_id'].apply(lambda x: inclui_clube(x))
  df_partidas['Casa_nome2'] = df_partidas['clube_casa_id'].apply(lambda x: inclui_clube(x))
  df_partidas['Fora_nome2'] = df_partidas['clube_visitante_id'].apply(lambda x: inclui_clube(x))

  df_partidas = df_partidas[['Casa_nome1', 'Fora_nome1', 'Casa_nome2', 'Fora_nome2']]

  def cria_confronto(casa_nome, fora_nome):
    return f'{casa_nome} x {fora_nome}'

  df_partidas['confronto'] = df_partidas.apply(lambda x: cria_confronto(x['Casa_nome1'], x['Fora_nome1']), axis = 1)

  df_partidas = df_partidas.set_index('Casa_nome1').merge(df_conquistado,left_index=True,right_index=True, suffixes=('_conquistado_casa', '_conquistado_fora'))
  df_partidas = df_partidas.set_index('Fora_nome1').merge(df_conquistado, left_index=True, right_index=True, suffixes=('_conquistado_casa', '_conquistado_fora'))
  df_partidas = df_partidas.set_index('Casa_nome2').merge(df_cedido,left_index=True,right_index=True, suffixes=('_cedido_casa', '_cedido_fora'))
  df_partidas = df_partidas.set_index('Fora_nome2').merge(df_cedido, left_index=True, right_index=True, suffixes=('_cedido_casa', '_cedido_fora'))

  df_1 = df_partidas[['confronto', f'{scout_selecionado}_conquistado_casa', f'{scout_selecionado}_cedido_fora']]
  df_2 = df_partidas[['confronto', f'{scout_selecionado}_conquistado_fora', f'{scout_selecionado}_cedido_casa']]

  selecao_possivel = ['Cedidos', 'Conquistados']
  selecao_escolhida = st.radio('Ordenar por: ', selecao_possivel)
  if selecao_escolhida == 'Cedidos':
    sel1 = 'cedido_fora'
    sel2 = 'cedido_casa' 
  else:
    sel1 = 'conquistado_casa'
    sel2 = 'conquistado_fora'

  df_1 = df_1.sort_values(by=f'{scout_selecionado}_{sel1}')
  df_2 = df_2.sort_values(by=f'{scout_selecionado}_{sel2}')

  def graph1(df_1):
    plt.style.use('dark_background')
    y = range(0, len(df_1))
    
    x_casa = df_1[f'{scout_selecionado}_conquistado_casa']
    x_fora = df_1[f'{scout_selecionado}_cedido_fora']

    fig, axes = plt.subplots(ncols=2, sharey=True, figsize=(7, 7))
    plt.subplots_adjust(wspace=.00)

    axes[0].barh(y, x_casa, align='center', color='green')
    axes[0].set(title='Conquistado time Casa')
    axes[1].barh(y, x_fora, align='center', color='red')
    axes[1].set(title='Cedido time Fora')


    limite = (max(max(x_casa), max(x_fora)))

    axes[0].set(xlim=(0, limite+.15*limite))
    axes[1].set(xlim=(0, limite+.15*limite))

    
    for p in axes[0].patches:
      width = p.get_width()
      plt.text(-p.get_width()-p.get_width()*.05-.1, p.get_y()+0.55*p.get_height(),
               f'{width if type(width) == int else round(width,2)}',
               ha='right', va='center')
    for p in axes[1].patches:
      width = p.get_width()
      plt.text(p.get_width()+p.get_width()*.05+.1, p.get_y()+0.55*p.get_height(),
               f'{width if type(width) == int else round(width,2)}',
               ha='left', va='center')
  

    axes[0].set(yticks=y, yticklabels=df_1['confronto'])
    axes[0].invert_xaxis()

    axes[0].grid(alpha = .15)
    axes[1].grid(alpha = .15)

    return fig

  def graph2(df_1):
    plt.style.use('dark_background')
    y = range(0, len(df_1))
    
    x_casa = df_1[f'{scout_selecionado}_cedido_casa']
    x_fora = df_1[f'{scout_selecionado}_conquistado_fora']

    fig, axes = plt.subplots(ncols=2, sharey=True, figsize=(7, 7))
    plt.subplots_adjust(wspace=.00)



    axes[0].barh(y, x_casa, align='center', color='red')
    axes[0].set(title='Cedido time Casa')
    axes[1].barh(y, x_fora, align='center', color='green')
    axes[1].set(title='Conquistado time Fora')

    limite = (max(max(x_casa), max(x_fora)))

    axes[0].set(xlim=(0, limite+.15*limite))
    axes[1].set(xlim=(0, limite+.15*limite))

    
    for p in axes[0].patches:
      width = p.get_width()
      plt.text(-p.get_width()-p.get_width()*.05-.1, p.get_y()+0.55*p.get_height(),
               f'{width if type(width) == int else round(width,2)}',
               ha='right', va='center')
    for p in axes[1].patches:
      width = p.get_width()
      plt.text(p.get_width()+p.get_width()*.05+.1, p.get_y()+0.55*p.get_height(),
               f'{width if type(width) == int else round(width,2)}',
               ha='left', va='center')
  

    axes[0].set(yticks=y, yticklabels=df_1['confronto'])
    axes[0].invert_xaxis()



    axes[0].grid(alpha = .15)
    axes[1].grid(alpha = .15)

    return fig

  graph1 = graph1(df_1)
  graph2 = graph2(df_2)
  col4, col5 = st.columns(2)
  with col4:
    st.write(graph1)
  with col5:
    st.write(graph2)

elif page == "Ranking SofaScore":

  data = pd.read_excel(f"sofascore_bruto/sofascore_bruto{rodada}.xlsx", engine='openpyxl')
  data = data[['Time', 'ID', 'Goals per game', 'Goal conversion', 'Big chances per game', 'Big chances missed per game', 'Ball possession', 'Total shots per game','Shots on target per game', 'Goals conceded per game', 'Saves per game', 'Duels won per game_acuracia', 'Ground duels won_acuracia', 'Aerial duels won_acuracia', 'Interceptions per game', 'Accurate per game_acuracia', 'Acc. opposition half_acuracia']]
  data.columns = ['Time', 'ID', 'Gols por jogo', 'Conversão de gols', 'Grandes chances por jogo', 'Grandes chances perdidas por jogo', 'Posse de bola média', 'Total de chutes por jogo', 'Chutes no gol por jogo', 'Gols concedidos por jogo', 'Defesas por jogo', 'Duelos ganhos por jogo', 'Duelos terrestres ganhos', 'Duelos aéreos ganhos', 'Interceptações por jogo', 'Eficiência de passe por jogo', 'Eficiência de passe no campo adversário']
  
  
  st.markdown("<h1 style='text-align: center; color: white;'>RANKING SOFASCORE</h1>", unsafe_allow_html=True)
  
  st.write("*Dados referentes à 34ª rodada do brasileirão 2021")
  def cria_df_info(scout_selecionado, lista_opcoes):
    if lista_opcoes[scout_selecionado] == '%':
      temp = data.set_index('Time').sort_values(by=scout_selecionado, ascending = True)[scout_selecionado]*100
      
    else:
      temp = data.set_index('Time').sort_values(by=scout_selecionado, ascending = True)[scout_selecionado]
  
    return temp.reset_index()
  
  def cria_graph(df, scout_selecionado, lista_opcoes):
    if lista_opcoes[scout_selecionado] == '%':
      titulo = '% De '
      axsub = '%'
    else:
      titulo = ''
      axsub = ''
    fig, axes = plt.subplots(ncols=1, sharey=True, figsize=(7, 7))
    axes.barh('Time', scout_selecionado,data = df, color='green')
    if lista_opcoes[scout_selecionado] == '%':
      for p in axes.patches:
        width = p.get_width()
        plt.text(4.5+p.get_width(), p.get_y()+0.55*p.get_height(),
                 f'{width if type(width) == int else round(width,2)}'+f'{axsub}',
                 ha='center', va='center')
      axes.set(xlim=(0, 100))
    else:
      for p in axes.patches:
        width = p.get_width()
        plt.text(.1+p.get_width(), p.get_y()+0.55*p.get_height(),
                 f'{width if type(width) == int else round(width,2)}'+f'{axsub}',
                 ha='center', va='center')
    axes.set(title=f'{titulo}{scout_selecionado}')
    axes.grid(alpha = .15)
  
    return fig
    
  col1, col2 = st.columns(2)
  ""
  with col1:
    st.markdown("<h2 style='text-align: center; color: white;'>ATAQUE</h2>", unsafe_allow_html=True)
    scouts_list_ataque = {'Gols por jogo':'', 'Posse de bola média':'%','Conversão de gols':'%', 'Grandes chances por jogo':'', 'Grandes chances perdidas por jogo':'', 'Total de chutes por jogo':'', 'Chutes no gol por jogo':'', 'Eficiência de passe por jogo':'%', 'Eficiência de passe no campo adversário':'%'}
    scout_selecionado_ataque = st.selectbox('Scout', options=list(scouts_list_ataque.keys()))
    ""
    data_temporario = cria_df_info(scout_selecionado_ataque, scouts_list_ataque)
    graph = cria_graph(data_temporario, scout_selecionado_ataque, scouts_list_ataque)
    
    st.write(graph)
  
  with col2:
    st.markdown("<h2 style='text-align: center; color: white;'>DEFESA</h2>", unsafe_allow_html=True)
    scouts_list_defesa = {'Gols concedidos por jogo':'', 'Defesas por jogo':'', 'Duelos ganhos por jogo':'%', 'Duelos terrestres ganhos':'%', 'Duelos aéreos ganhos':'%', 'Interceptações por jogo':''}
    scout_selecionado_defesa = st.selectbox('Scout', options=list(scouts_list_defesa.keys()))
    ""
    data_temporario = cria_df_info(scout_selecionado_defesa, scouts_list_defesa)
    graph = cria_graph(data_temporario, scout_selecionado_defesa, scouts_list_defesa)  
    st.write(graph)

elif page == "Comparação de jogadores":

  st.markdown("<h1 style='text-align: center; color: white;'>COMPARAÇÃO DE JOGADORES</h1>", unsafe_allow_html=True)
  data = pd.read_excel("completo_mercado.xlsx", engine='openpyxl')
  data['Mando_clube_proxima_rodada'] = data['Clube_ID'].apply(lambda x: inclui_mando_proxima_rodada(x))
  data['Mando_adversario_proxima_rodada'] = data['Adversario'].apply(lambda x: inclui_mando_proxima_rodada(x))
  st.write("*Dados referentes à 34ª rodada do brasileirão 2021")
  def inclui_clube_nome(nome, clube):
    nome_sigla = nome + ' ' + clube
    return nome_sigla

  data['Apelido'] = data.apply(lambda x: inclui_clube_nome(x['Apelido'], x['Clube_nome']), axis = 1)
  data = data[data['Posicao_nome'] != 'Técnico']

  selecionaveis = data['Apelido'].sort_values().unique()
  col1, col2 = st.columns(2)
  with col1:
    j1_selecionado = st.selectbox('Jogador 1', options=selecionaveis)
    selecionaveis = np.delete(selecionaveis, np.where(selecionaveis == j1_selecionado)[0][0])
  with col2:
    j2_selecionado = st.selectbox('Jogador 2', options=selecionaveis)

  data1 = data[data['Apelido'] == j1_selecionado].sort_values(by='Rodada')
  data2 = data[data['Apelido'] == j2_selecionado].sort_values(by='Rodada')

  data1 = data1[(data1['Pontos'] != 0) & (data1['Variacao'] != 0)]
  data2 = data2[(data2['Pontos'] != 0) & (data2['Variacao'] != 0)]

  def calcula_media(df):
    return round(np.mean(df.Pontos), 2)

  def calcula_mediana(df):
    return round(np.median(df.Pontos), 2)

  def calcula_dp(df):
    return round(np.std(df.Pontos), 2)

  def calcula_participacao(df):
    gol = sum(df.G)
    ass = sum(df.A)
    return gol+ass

  def calcula_mediaBasica(df):
    scouts_list = [sum(df.FT), sum(df.FD), sum(df.FF), sum(df.FS), sum(df.I), sum(df.PI), sum(df.PS), sum(df.DE), sum(df.DS), sum(df.GS), sum(df.FC)]
    values_list = [3, 1.2, 0.8, 0.5, -0.5, -0.1, 1, 1, 1, -1, -0.5]
    mean = np.mean(scouts_list*np.transpose(values_list))
    return round(mean, 2)


  def calcula_prop(df, data):
    posicao = np.unique(df.Posicao_nome)[0]
    time  = np.unique(df.Clube_ID)[0]
    pont_jog = sum(df.Pontos)
    data_frame = data[data['Clube_ID'] == time]
    data_frame = data_frame[data_frame['Posicao_nome'] == posicao]
    pont_time = sum(data_frame.Pontos)
    prop = pont_jog/pont_time
    return str(round(prop, 2)*100) + '%'
    
  def calcula_mediaMovel(df):
    pontos = df.Pontos[-3:]
    return round(np.mean(pontos), 2)

  media_casa, media_fora = calcula_media(data1), calcula_media(data2)
  mediana_casa, mediana_fora = calcula_mediana(data1), calcula_mediana(data2)
  desvio_casa, desvio_fora = calcula_dp(data1), calcula_dp(data2)
  participacao_casa, participacao_fora = calcula_participacao(data1), calcula_participacao(data2)
  mediaBas_casa, mediaBas_fora = calcula_mediaBasica(data1), calcula_mediaBasica(data2)
  propPont_casa, propPont_fora = calcula_prop(data1, data), calcula_prop(data2, data)
  medMov_casa, medMov_fora = calcula_mediaMovel(data1), calcula_mediaMovel(data2)
  ""
  ""
  col0, col1, col2, col3 = st.columns((.85, .1, 1, .9))
  with col1:
    ""
    st.markdown(media_casa)
    st.markdown(mediana_casa)
    st.markdown(mediaBas_casa)
    st.markdown(medMov_casa)
    st.markdown(participacao_casa)
    st.markdown(propPont_casa)
    st.markdown(desvio_casa)

  with col2:
    ""
    st.markdown('<div style="text-align: center"> Média </div>', unsafe_allow_html=True)
    ""
    st.markdown('<div style="text-align: center"> Mediana </div>', unsafe_allow_html=True)
    ''
    st.markdown('<div style="text-align: center"> Média Básica </div>', unsafe_allow_html=True)
    ''
    st.markdown('<div style="text-align: center"> Média Móvel 3 Jogos </div>', unsafe_allow_html=True)
    ''
    st.markdown('<div style="text-align: center"> Participação em Gols </div>', unsafe_allow_html=True)
    ''
    st.markdown('<div style="text-align: center"> Represent. da Pontuação </div>', unsafe_allow_html=True)
    ''
    st.markdown('<div style="text-align: center"> Desvio Padrão da Pontuação </div>', unsafe_allow_html=True)
  with col3:
    ""
    st.markdown(media_fora)
    st.markdown(mediana_fora)
    st.markdown(mediaBas_fora)
    st.markdown(medMov_fora)
    st.markdown(participacao_fora)
    st.markdown(propPont_fora)
    st.markdown(desvio_fora)


  with st.beta_expander("Observações"):
    st.write("* 'Mediana' mostra o valor central da pontuação do jogador. Em 50% dos jogos o jogador pontuou acima do valor da mediana e nos outros 50% ele pontuou abaixo. Ao contrário da média, a mediana não é afetada por pontuações extremas, o que pode mostrar mais sobre a regularidade do jogador")
    ''
    st.write("* 'Média Móvel 3 Jogos' mostra a média das pontuações do jogador nos último 3 jogos")
    ''
    st.write("* 'Represent. da Pontuação' mostra quanto a pontuação do jogador representa do total das pontuações de todos os jogadores da mesma posição no time")
    ''
    st.write("* 'Desvio Padrão da Pontuação' mostra a variabilidade da pontuação do jogador. Quanto menor o desvio, mais constante é o jogador em termos de pontuação")
    ''
elif page == "Confrontos":

  st.markdown("<h1 style='text-align: center; color: white;'>CONFRONTOS</h1>", unsafe_allow_html=True)
  data = pd.read_excel("completo_mercado.xlsx", engine='openpyxl')
  data['Mando_clube_proxima_rodada'] = data['Clube_ID'].apply(lambda x: inclui_mando_proxima_rodada(x))
  data['Mando_adversario_proxima_rodada'] = data['Adversario'].apply(lambda x: inclui_mando_proxima_rodada(x))
  st.write("*Dados referentes à 34ª rodada do brasileirão 2021")
  def inclui_clube_nome(ID:int):
      """
      Função para incluir o nome do clube no DataFrame, que tem como única identificação o ID do clube.

      Argumento: ID -> identificador do clube
      Saída: Abreviação do nome do clube
      """
      return clubes.set_index("id").loc[ID, 'nome']


  df_partidas = pd.DataFrame.from_dict(json_partida['partidas'])
  df_partidas['Casa_nome1'] = df_partidas['clube_casa_id'].apply(lambda x: inclui_clube_nome(x))
  df_partidas['Fora_nome1'] = df_partidas['clube_visitante_id'].apply(lambda x: inclui_clube_nome(x))
  df_partidas['Casa_nome2'] = df_partidas['clube_casa_id'].apply(lambda x: inclui_clube_nome(x))
  df_partidas['Fora_nome2'] = df_partidas['clube_visitante_id'].apply(lambda x: inclui_clube_nome(x))

  df_partidas = df_partidas[['Casa_nome1', 'Fora_nome1', 'Casa_nome2', 'Fora_nome2']]

  def cria_confronto(casa_nome, fora_nome):
    return f'{casa_nome} x {fora_nome}'
  df_partidas['confronto'] = df_partidas.apply(lambda x: cria_confronto(x['Casa_nome1'], x['Fora_nome1']), axis = 1)

  confrontos_selecionaveis = df_partidas['confronto'].sort_values().unique()
  confronto_selecionado = st.selectbox('Confronto', options=confrontos_selecionaveis)

  time1_selecionado = confronto_selecionado.split(' x ')[0]
  time2_selecionado = confronto_selecionado.split(' x ')[1]

  t1 = clubes.set_index("nome").loc[time1_selecionado, 'abreviacao']
  t2 = clubes.set_index("nome").loc[time2_selecionado, 'abreviacao']

  data = pd.read_excel("completo_mercado.xlsx", engine='openpyxl')
  data['Mando_clube_proxima_rodada'] = data['Clube_ID'].apply(lambda x: inclui_mando_proxima_rodada(x))
  data['Mando_adversario_proxima_rodada'] = data['Adversario'].apply(lambda x: inclui_mando_proxima_rodada(x))
  data = data[(data['Pontos'] != 0)&(data['Variacao'] != 0)]

  lista_pos = ['GOL', 'ZAG', 'LE', 'LD', 'MEI', 'ATA']
  posicao_list = ['Goleiro', 'Zagueiro', 'Lateral Esquerda', 'Lateral Direito', 'Meia', 'Atacante']
  conquistado_casa = []
  cedido_fora = []
  conquistado_fora = []
  cedido_casa = []

  for posicao in posicao_list:
    conquistado_casa.append(data[data['Posicao_nome'] == posicao].groupby(by='Clube_nome').median()['Pontos'].loc[t1])
    cedido_fora.append(data[data['Posicao_nome'] == posicao].groupby(by='Adversario_nome').median()['Pontos'].loc[t2])

    conquistado_fora.append(data[data['Posicao_nome'] == posicao].groupby(by='Clube_nome').median()['Pontos'].loc[t2])
    cedido_casa.append(data[data['Posicao_nome'] == posicao].groupby(by='Adversario_nome').median()['Pontos'].loc[t1])


  x = np.arange(len(posicao_list))  # the label locations
  width = 0.35  # the width of the bars

  fig, ax = plt.subplots()
  rects1 = ax.bar(x - width/2, conquistado_casa, width, label='Conquistado', color = 'green')
  rects2 = ax.bar(x + width/2, cedido_fora, width, label='Cedido', color = 'red')

  # Add some text for labels, title and custom x-axis tick labels, etc.
  ax.set_ylabel('Pontuação Mediana')
  ax.set_title('Conquistado Mandante & Cedido Visitante')
  ax.set_xticks(x)
  ax.set_xticklabels(lista_pos, rotation = -45)
  ax.legend()

  fig.tight_layout()


  col1, col2 = st.columns(2)
  with col1:
    st.write(fig)
  ###
  x = np.arange(len(posicao_list))  # the label locations
  width = 0.35  # the width of the bars

  fig, ax = plt.subplots()
  rects1 = ax.bar(x - width/2, conquistado_fora, width, label='Conquistado', color = 'green')
  rects2 = ax.bar(x + width/2, cedido_casa, width, label='Cedido', color = 'red')

  # Add some text for labels, title and custom x-axis tick labels, etc.
  ax.set_ylabel('Pontuação Mediana')
  ax.set_title('Conquistado Visitante & Cedido Mandante')
  ax.set_xticks(x)
  ax.set_xticklabels(lista_pos, rotation = -45)
  ax.legend()
  

  #for i, v in enumerate(conquistado_fora):
  #  ax.text(i, v, str(v), color='white')


  fig.tight_layout()
  with col2:
    st.write(fig)
  
  with st.beta_expander("Observações"):
    st.write("* 'Mediana' mostra o valor central da pontuação do time. Em 50% dos jogos o time conquistou/cedeu acima do valor da mediana e nos outros 50% ele conquistou/cedeu abaixo. Ao contrário da média, a mediana não é afetada por pontuações extremas, o que pode mostrar mais sobre a regularidade das pontuações cedidas/conquistadas")
    ''
  ''

  st.markdown("<h2 style='text-align: center; color: white;'>SCOUTS QUE TIMES MAIS CEDERAM POR POSIÇÃO</h2>", unsafe_allow_html=True)
  ''
  posicao_selecionaveis = ['Goleiro', 'Zagueiro', 'Lateral Esquerdo', 'Lateral Direito', 'Meia', 'Atacante']
  posicao_selecionado = st.selectbox('Posicao', options=posicao_selecionaveis)


  #data_conquistado_casa = data.groupby(by='Clube_nome').sum().loc[t1]
  #data_conquistado_fora = data.groupby(by='Clube_nome').sum().loc[t2]
  ####################################################################

  data_cedido_casa = data[data['Posicao_nome'] == posicao_selecionado].groupby(by='Adversario_nome').sum().loc[t1]
  data_cedido_fora = data[data['Posicao_nome'] == posicao_selecionado].groupby(by='Adversario_nome').sum().loc[t2]


  scouts = ['G', 'A', 'FT', 'FD', 'FF', 'FS', 'PP', 'I', 'PI', 'PS', 'SG', 'DP', 'DE', 'DS', 'GC', 'CV', 'CA', 'GS', 'FC', 'PC']
  pont_scouts = [8, 5, 3, 1.2, 0.8, 0.5, -4, -0.5, -0.1, 1, 5, 7, 1, 1, -5, -5, -2, -1, -0.5, -1]
  
  dict_cedido_casa = {}
  dict_cedido_fora = {}

  for i,scout in enumerate(scouts):
    dict_cedido_casa[scout] = round(data_cedido_casa[scout]*pont_scouts[i], 2)
    dict_cedido_fora[scout] = round(data_cedido_fora[scout]*pont_scouts[i], 2)

  def ordena_scouts(dicionario):
    nome_scout = []
    pont_scout = []

    sort_orders = sorted(dicionario.items(), key=lambda x: x[1], reverse=True)

    for i, (j, k) in enumerate(sort_orders):
      if i < 5:
        nome_scout.append(j)
        pont_scout.append(k)
      else:
        break

    return nome_scout, pont_scout


  nome_scout_cedido_fora, pont_scout_cedido_fora = ordena_scouts(dict_cedido_fora)
  nome_scout_cedido_casa, pont_scout_cedido_casa = ordena_scouts(dict_cedido_casa)

  ''
  col1, col2 = st.columns(2)
  with col1:
  

    st.markdown("<h3 style='text-align: left; color: white;'>CEDIDOS PELO MANDANTE</h3>", unsafe_allow_html=True)
    ''
    for i in range(5):
      st.write(f"{nome_scout_cedido_casa[i]} => {pont_scout_cedido_casa[i]} pontos")

  with col2:
  
    st.markdown("<h3 style='text-align: left; color: white;'>CEDIDOS PELO VISITANTE</h3>", unsafe_allow_html=True)
    ''
    for i in range(5):
      st.write(f"{nome_scout_cedido_fora[i]} => {pont_scout_cedido_fora[i]} pontos")

  